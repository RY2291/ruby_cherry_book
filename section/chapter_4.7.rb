# 配列[位置、取得する長さ]
  # ２つめの要素から３つ分の要素を取り出す
  a = [1, 2, 3, 4, 5]
  p a[1, 3]
  
  # 取得したい要素の添字を複数指定
  a = [1, 2, 3, 4, 5]
  p a.values_at(0, 3, 4)
  
  # 最後の要素を取得
  a = [1, 2, 3, 4, 5]
  p a[a.size - 1]
  
  # 添字に負の値で取得したい値を指定
  a = [1, 2, 3, 4, 5]
  p a[-1]
  
  a = [1, 2, 3, 4, 5]
  p a[-2, 2]
  
# さまざまな要素の変更方法
  # 開始位置と長さを指定して要素を置き換える
  a = [1, 2, 3, 4, 5]
  a[1, 3] = 100
  p a
  
  # 要素の追加
  a = []
  a.push(1)
  p a
  
  # 指定した値に一致する要素を削除(削除した値が戻り値)
  a = [1, 2, 3, 4, 5]
  a.delete(2)
  p a
  
    # 存在しない値を削除（nilが返る）
    a = [1, 2, 3, 4, 5]
    a.delete(6)
    p a

  # 配列の連結
    # concatメソッドで連結（破壊的メソッド）=> メソッドを呼び出した側(a)の配列が変更される
    a = [1, 2]
    b = [3]
    p a.concat(b)
    p a

    # +を使用すると元の配列を変更せず、新しい配列を作成する
    a = [1]
    b = [2, 3]
    p a + b
    p a

p "-------------------"
# 配列の和集合、差集合、積集合(非破壊的)
  # |は和集合を求める演算子 => ２つの配列を全て集めて、重複しない
  a = [1, 2, 3]
  b = [3, 4, 5]
  p a | b

  # -は差集合を求める演算子 => 左の配列から右の配列に含まれる要素を取り除く
  a = [1, 2, 3]
  b = [3, 4, 5, 6]
  p a - b
  
  # &は積集合を求める演算子　=> ２つの配列に共通する要素を返す
  a = [1, 2, 3, 4]
  b = [3, 4, 5, 6]
  p a & b
  

# 多重代入で残りの全要素を配列として受け取る
  # 通常の多重代入は、左辺の変数と右辺の個数が合致しない場合、切り捨てられる
  e, f = 100, 200, 300
  p e, f

  # 左辺の変数に＊を付けると、残りの全要素を配列として受け取れる
  e, *f = 100, 200, 300
  p e, f

# 1つの配列を複数の引数として展開する
  # メソッドの引数に配列を渡す場合は、配列の前に＊を付ける
  a = []
  b = [2, 3]
  a.push(1)
  p a.push(*b)

# メソッドの可変長引数
  # 可変長引数 => pushメソッドのように引数に個数に制限がない
  # 自分で定義するメソッドで可変長引数を使いたい場合は、引数名の前に＊を付ける
    # def メソッド名（引数１、引数２、*可変長引数）
    # end
    def greeting(*names)
      "#{names.join("と")}、こんにちは"
    end
    p greeting("田中")
    p greeting("田中", "鈴木")
    p greeting("田中", "鈴木", "吉田")


# *で配列同士を非破壊的に連結
    # []に中に＊付きで別の配列を置くと、その配列が展開されて別々の要素になる
    a = [1, 2, 3]
    p [a]
    p [*a]
    
    # 別の配列を要素の一部とする新しい配列を作ることができる
    a = [1, 2, 3]
    p [-1, 0, *a, 4, 5, 6]

# %記法で文字列の配列を簡潔に作る
    # %wで文字列の配列を作成する(!で囲む場合)
    p %W!apple melon orange!

    # %wで文字列の配列を作成する(丸カッコで囲む場合)
    p %W(dog cat monkey)
    
    # 値にスペースを含めたい場合はバックスラッシュを付ける
    p %W(big\ dog small\ cat nomal\ monkey)
    

# 文字列を配列に変換する
    # charsメソッド　=> 文字列中の１文字１文字を配列の要素に分解するメソッド
    p "Ruby".chars

    # splitメソッド => 引数で渡した区切り文字で文字列を配列に分解するメソッド
    p "Ruby,Java,PHP".split(",")

# 配列に初期値を設定する
    # 配列オブジェクトを作成
    a = Array.new
    p a
    
    # Array.newに引数を渡すと、その個数分の要素が追加される
    a = Array.new(5)
    p a
    
    # 第2引数を指定すると、nil以外の初期値を設定できる
    a = Array.new(5, 0)
    p a

    a = Array.new(9) { |n| n % 3 + 1 }
    p a