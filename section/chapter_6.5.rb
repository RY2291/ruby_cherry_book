# 正規表現オブジェクトを作成する様々な方法
  # //以外にRegexp.newの引数にパターンの文字列を渡す方法
  Regexp.new("\d{3}-\d{4}")  # /\d{3}-\d{4}/と同じ

  # または%rで正規表現オブジェクトを作成
  %r!http://example\.com!

  # !でなく{}を区切り文字にする
  %r{http://example\.com}

  # case節で指定した文字列がwhen節で指定した正規表現にマッチするとwhen節の処理が実行される
  text = "03-1234-5678"

  case text
  when /^\d{3}-\d{4}$/
    puts "郵便番号です"
  when /^\d{4}\/\d{1,2}\/\d{1,2}/
    puts "日付です"
  when /^\d+-\d+-\d+$/
    puts "電話番号です"
  end

# 正規表現オブジェクト作成時のオプション
  # iオプション　=> アルファベットの大文字と小文字の違いを無視してマッチする
  p "HELLO" =~ /hello/i

  # mオプション => 任意の文字を表す.が改行文字にもマッチする
  p "Hello\nBye" =~ /Hello.Bye/
  p "Hello\nBye" =~ /Hello.Bye/m

  # xオプション　=> 空白文字（半角スペースや改行文字）が無視され、#を使って正規表現中にコメントがかける
  regexp = /
    \d{3} # 郵便番号の先頭３桁
    -     # 区切り文字のハイフン
    \d{4} # 郵便番号の末尾４桁
  /x
  p "123-4567" =~ regexp