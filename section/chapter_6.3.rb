# 正規表現
  # /でパターンを囲んで作成（正規表現リテラル）

  # 正規表現はRegexpクラスのオブジェクト
  regex = /\d{3}-{4}/
  p regex.class

  # =~は正規表現と文字列を比較する際に使用される。正規表現がマッチした場合は文字列中のマッチした位置が返り、マッチしない場合はnilが返る
  "123-4567" =~ /\d{3}-\d{4}/ # 0
  "hello" =~ /\d{3}-{4}/ #nil

  # =~の戻り値はマッチすれば真、しなければ偽を表す
  if "123-4567" =~ /\d{3}-\d{4}/ 
    puts "マッチしました"
  else
    puts "マッチしませんでした"
  end

  # !~を使用してマッチしなかった時にtrue、マッチした時にfalseを返す
  "hello" !~ /\d{3}-\d{4}/ #true
  "123-4567" !~ /\d{3}-\d{4}/ # false

  # 正規表現のキャプチャ機能
    # ()を使用して抜き出したい部分を指定する
    text = "私の誕生日は1977年7月17日です。"
    p m = /(\d+)年(\d+)月(\d+)日/.match(text)
    p m[1]
    p m[2]
    p m[3]

    # 真偽値の判定とローカル変数への代入を同時にやる
    text = "私の誕生日は1977年7月17日です。"
    if m = /(\d+)年(\d+)月(\d+)日/.match(text)
      p "#{m} マッチしました"
    else
      "マッチしません"
    end

    # (?<name>)を使用してキャプチャの結果に名前を付ける
    /(?<year>\d+)年(?<month>\d+)月(?<day>\d+)日/

    text = "私の誕生日は1977年7月17日です。"
    m = /(?<year>\d+)年(?<month>\d+)月(?<day>\d+)日/.match(text)
    # シンボルで名前を指定してキャプチャの結果を取得する
    p m[:year]
    p m[:month]
    p m[:day]
    # 文字列でも指定できる
    p m["year"]
    # 連番で指定できる
    p m[3]

# 正規表現と組み合わせると便利なStringメソッド
  # scanメソッド => 引数で渡した正規表現にマッチする部分を配列に入れて返す
    p "123 456 789".scan(/\d+/)

    # ()があると、キャプチャーされた部分が配列の配列になって返る
    p "1977年7月17日 2016年12月31日".scan(/(\d+)年(\d+)月(\d+)日/)

    # グループ化したいが、キャプチャーはしたくない場合は、(?:)を使用
    p "1977年7月17日 2016年12月31日".scan(/(?:\d+)年(?:\d+)月(?:\d+)日/)


  # [](slice, slice!)
    # []に正規表現を渡すと、文字列から正規表現にマッチした部分を抜き出す
    text = "郵便番号は123-4567です"
    p text[/\d{3}-\d{4}/]
    
    # マッチする部分が複数ある場合は、最初にマッチした文字列が返る
    text = "123-4567 456-7890"
    p text[/\d{3}-\d{4}/]
    
    # キャプチャを使用すると第2引数で何番目のキャプチャを取得できるか指定することができる
    text = "私の誕生日は1977年7月17日です。"
    p text[/(\d+)年(\d+)月(\d+)日/, 3]

    # 名前付きキャプチャであれば名前を指定することができる
    text = "私の誕生日は1977年7月17日です。"
    p text[/(?<year>\d+)年(?<month>\d+)月(?<day>\d+)日/, :month]

    # sliceメソッドは[]のエイリアスメソッド
    text = "郵便番号は194-0211です"
    p text.slice(/\d{3}-\d{4}/)
    
    # slice!にするとマッチした部分が文字列から破壊的に取り除かれる
    text = "郵便番号は194-0211です"
    p text.slice!(/\d{3}-\d{4}/)
    p text
  
  # split
    # splitに正規表現を渡すと、マッチした文字列を区切り文字にして文字列を分解して、配列として返す
    text = "123,456-789"
    p text.split(",")
    p text.split(/,|-/)

  # gsub, gsub!
    # gusbメソッド => 第１引数に文字列を渡すと、完全に一致する文字列を第2引数で置き換える
    text = "123,456-789"
    p text.gsub(",", ":")
    # 第１引数の正規表現にマッチした文字列を第2引数の文字列で置き換える
    p text.gsub(/,|-/, ":")

    # キャプチャを使用すると、第2引数で\1や\2のようにしてキャプチャした文字列を連番で参照できる
    text = "私の誕生日は1977年7月17日です。"
    p text.gsub(/(\d+)年(\d+)月(\d+)日/, '\1-\2-\3')